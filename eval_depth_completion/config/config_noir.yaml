# Config for eval script - Depth Completion Synthetic

# Input file Directories of Synthetic Images
files:
  image: '/messytable-slow-vol/messy-table-dataset/ijrrobj_simtest_fixang_fixpat/data/'
  depth: '/messytable-slow-vol/messy-table-dataset/real_data_v10/'
  masks: '/media/jianyu/dataset/messy-table-dataset/real_v9/training'
  gt_depth: '/messytable-slow-vol/messy-table-dataset/ijrrobj_simtest_fixang_fixpat/data/'
  label: '/messytable-slow-vol/messy-table-dataset/ijrrobj_simtest_fixang_fixpat/data/'
  normal: '/messytable-slow-vol/messy-table-dataset/real_data_v10/'
  imagename: '0128_irL_kuafu_half_no_ir.png'
  normalname: 'normalL.png'
  gt_depthname: 'depthL.png'
  labelname: 'labelL.png'
  split_file: '/messytable-slow-vol/messy-table-dataset/real_data_v10/test.txt'


# Path where the results will be stored
resultsDir: '/jianyu-fast-vol/eval/cleargrasp_sim_noir_test'

# Surface Normals Model
normals:
  model: 'drn'  # Which model to use for inference. Possible values: ['unet', 'deeplab_resnet']
  pathWeightsFile: '/jianyu-fast-vol/cgmstable/pytorch_networks/surface_normals/logs-deeplab-noir/exp-000/checkpoints/checkpoint-epoch-0015.pth'  # Path to the checkpoint to be loaded
  inferenceHeight: 540
  inferenceWidth: 960

# Outlines Model
outlines:
  model: 'drn'  # Which model to use for inference. Possible values: ['unet', 'deeplab_resnet']
  pathWeightsFile: '/jianyu-fast-vol/cgmstable/pytorch_networks/occlusion_boundaries/logs-deeplab-noir/exp-001/checkpoints/checkpoint-epoch-0010.pth'  # Path to the checkpoint to be loaded
  inferenceHeight: 540
  inferenceWidth: 960

# Segmentation Masks Model
masks:
  model: 'drn' # Which model to use for inference. Possible values: ['drn', 'deeplab_resnet']
  pathWeightsFile: '/jianyu-fast-vol/cgmstable/pytorch_networks/masks/logs-deeplab-noir/exp-001/checkpoints/checkpoint-epoch-0015.pth'
  inferenceHeight: 540
  inferenceWidth: 960

# Parameters passed to Depth Completion Module
depth2depth:
  pathExecutable: '/jianyu-fast-vol/cgmstable/api/depth2depth/gaps/bin/x86_64/depth2depth'  # The path to the depth2depth executable.
  xres: 960  # Image Output Width
  yres: 540  # Image Output Height
  fx: 672 # Focal length in pixels along width
  fy: 672 # Focal length in pixels along height
  cx: 476 # Center of image in pixels along width
  cy: 270  # Center of image in pixels along height
  inertia_weight: 1000.0  # The strength of the penalty on the difference between the input and the output depth map on observed pixels. Set this value higher if you want to maintain the observed depth from input_depth.
  smoothness_weight: 0.001  # The strength of the penalty on the difference between the depths of neighboring pixels. Higher smoothness weight will produce soap-film-like result.
  tangent_weight: 1.0  # The universal strength of the surface normal constraint. Higher tangent weight will force the output to have the same surface normal with the given one.

# Values Used for RGB Visualization of depth images  in saved results
depthVisualization:
  minDepth: 0.1  # meters. Depth less than this value not considered in creating rgb visualization of depth.
  maxDepth: 1.5  # meters. Depth more than this value not considered in creating rgb visualization of depth.

# Method used to modify input depth before depth completion
#   ''     - Do nothing
#   'mask' - Get mask of transparent objects using DNN and delete all those pixels from input depth
modifyInputDepth:
  mode: 'mask'   # Valid values: ['', 'mask']

# Parameters of Bi-Lateral Filter applied to output depth. Give value to `d` to enable the filter.
outputDepthFilter:
  d: 0
  sigmaColor: 3
  sigmaSpace: 3
